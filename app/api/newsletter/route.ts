import { prisma } from "@/lib/prisma"; // Utilisation de l'alias @/
import { Resend } from "resend";
import { NextResponse } from "next/server";

const resendApiKey = process.env.RESEND_API_KEY;

if (!resendApiKey) {
  console.error("RESEND_API_KEY is not set in environment variables.");
  // Tu peux choisir de lancer une erreur ou de continuer avec une instance non fonctionnelle
  // throw new Error("RESEND_API_KEY is not set");
}

// Initialise Resend seulement si la cl√© API existe
const resend = resendApiKey ? new Resend(resendApiKey) : null;

export async function POST(req: Request) {
  try {
    const { email } = await req.json();

    if (!email || typeof email !== 'string' || !email.includes("@")) {
      return NextResponse.json({ error: "Email invalide" }, { status: 400 });
    }

    // V√©rifie si l'email existe d√©j√†
    const existingSubscriber = await prisma.newsletterSubscriber.findUnique({
      where: { email },
    });

    if (existingSubscriber) {
      // Retourne un succ√®s m√™me si d√©j√† abonn√© pour ne pas r√©v√©ler d'informations
      // Ou retourne un message sp√©cifique si tu pr√©f√®res
      return NextResponse.json({ message: "D√©j√† abonn√©" }, { status: 200 });
    }

    // Cr√©e le nouvel abonn√©
    await prisma.newsletterSubscriber.create({
      data: { email },
    });

    // Envoi de l'email de bienvenue via Resend, seulement si Resend est initialis√©
    if (resend) {
      try {
         await resend.emails.send({
          from: "Le Monde Sucr√© <newsletter@lemondesucredelinda.com>",
          to: email,
          subject: "Bienvenue dans la Newsletter du Monde Sucr√© ‚ú®",
          html: `
            <table width="100%" cellpadding="0" cellspacing="0" style="font-family: 'Arial', sans-serif; background: #fff7f9; color: #2d2d2d; padding: 32px;">
              <tr>
                <td align="center">
                  <h1 style="font-size: 28px; color: #e91e63;">Le Monde Sucr√© de Linda</h1>
                  <p style="font-size: 18px;">üßÅ Votre dose de douceur & de cr√©ativit√© !</p>
                </td>
              </tr>

              <tr>
                <td style="padding: 24px; background: #ffffff; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.05);">
                  <h2 style="color: #333;">Bienvenue dans la newsletter !</h2>
                  <p style="font-size: 16px; line-height: 1.6;">
                    Bonjour gourmand(e),<br><br>

                    Merci pour votre inscription √† <strong>‚ÄúLe Monde Sucr√© de Linda‚Äù</strong> üç∞<br>
                    Vous recevrez bient√¥t des recettes exclusives, des astuces de p√¢tisserie et une bonne dose d‚Äôinspiration sucr√©e ‚ú®

                    <br><br>
                    üç¨ <strong>Astuce du jour :</strong> Pour des meringues parfaites, ajoute une pointe de vinaigre blanc √† tes blancs mont√©s¬†!

                    <br><br>
                    √Ä tr√®s vite pour de nouvelles douceurs !<br><br>
                    ‚Äî Linda üíï
                  </p>
                </td>
              </tr>

              <tr>
                <td align="center" style="padding-top: 32px; font-size: 12px; color: #888;">
                  Vous recevez cet email car vous √™tes inscrit √† la newsletter du Monde Sucr√©.<br>
                  <a href="#" style="color: #e91e63;">Se d√©sabonner</a>
                </td>
              </tr>
            </table>
          `,
        });
      } catch (emailError) {
         console.error("Erreur lors de l'envoi de l'email Resend:", emailError);
         // D√©cide si l'√©chec de l'email doit annuler l'op√©ration ou juste √™tre loggu√©
         // Ici, on continue m√™me si l'email √©choue, car l'abonn√© est en BDD
      }
    } else {
      console.warn("Resend n'est pas configur√© (RESEND_API_KEY manquante), l'email de bienvenue n'a pas √©t√© envoy√©.");
    }


    return NextResponse.json({ success: true }, { status: 201 }); // Status 201 pour cr√©ation r√©ussie

  } catch (error) {
    console.error("Erreur dans l'API Newsletter:", error);
    // Log l'erreur c√¥t√© serveur pour le d√©bogage
    // Retourne une erreur g√©n√©rique au client
    return NextResponse.json({ error: "Une erreur interne est survenue." }, { status: 500 });
  }
}