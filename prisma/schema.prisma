generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  role          String    @default("admin")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum RecipeCategory {
  TARTES
  CHOCOLAT
  CREMES
  GOURMANDISES
  VIENNOISERIES
  CONFISERIES
  ENTREMETS
  BISCUITS
  GATEAUX_DE_VOYAGES
}

model Recipe {
  id           String       @id @default(cuid())
  title        String
  description  String?
  image        String?
  difficulty   String?
  prepTime     Int?
  cookTime     Int?
  basePortions Int
  category     RecipeCategory @default(TARTES) // Utilise la nouvelle énumération, n'est plus optionnel, et a une valeur par défaut
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  published    Boolean      @default(false)
  ingredients  Ingredient[]
  steps        RecipeStep[]
}

model Ingredient {
  id       String @id @default(cuid())
  name     String
  quantity Float
  unit     String
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId])
}

model RecipeStep {
  id          String @id @default(cuid())
  order       Int
  description String
  duration    Int?
  recipeId    String
  recipe      Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, order])
  @@index([recipeId])
}

model Creation {
  id          String   @id @default(cuid())
  title       String
  description String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  published   Boolean  @default(false)
}

model Article {
  id          String    @id @default(cuid())
  title       String
  content     String
  tags        String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  excerpt     String?
  image       String?
  publishedAt DateTime?
  slug        String    @unique
}

model NewsletterSubscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model NewsletterCampaign {
  id             String    @id @default(cuid())
  title          String
  message        String
  sentAt         DateTime  @default(now())
  scheduledAt    DateTime?
  recipientCount Int       @default(0)
}
